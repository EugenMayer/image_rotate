<?php



/*
 * Implementation of hook_theme()
 */

function image_rotate_theme()
{
  return array(
    'image_rotate' => array(
      'arguments' => array(),
    ),
  );
}

/*
 * implementation of hook_theme()
 */

//@TODO caching?

function theme_image_rotate($text) {

  $path = drupal_get_path('module', 'image_rotate');

  //All images resist in /fonts inside the module folder
  //Path is absolute from server root /var/www/...

  $fontFile = variable_get('image_rotate_fontFile', 'arial.ttf');
  $font = $_SERVER['DOCUMENT_ROOT'] . "/$path/fonts/$fontFile";
  $angle = variable_get('image_rotate_angle', 90);
  $font_size = variable_get('image_rotate_fontSize', 10);
  $text_padding = variable_get('image_rotate_variable_get', 0); // Img padding - around text

  //get the bounding box for the text so that the text matches the canvas
  $textBox = calculateTextBox($text, $font, $font_size, $angle);
  $imgWidth = $textBox["width"] + $text_padding;
  $imgHeight = $textBox["height"] + $text_padding;

  //create canvas with transparency
  $im = imageCreateTruecolor($imgWidth, $imgHeight);

  imageSaveAlpha($im, true);
  imageAlphaBlending($im, false);
  $transparent_color = imagecolorAllocateAlpha($im, 255, 255, 255, 127);
  imageFilledRectangle($im, 0, 0, $imgWidth, $imgHeight, $transparent_color);
  imageAlphaBlending($im, true);

  //text color
  $black = ImageColorAllocate($im, 0, 0, 0);


  //positioning of the text inside the box
  $posX = $textBox["left"] + ($imgWidth / 2) - ($textBox["width"] / 2);
  $posY = $textBox["top"] + ($imgHeight / 2) - ($textBox["height"] / 2);
  ImageTTFText($im, $font_size, $angle, $posX, $posY, $black, $font, $text);

  $image_rotate_file_dir = $_SERVER['DOCUMENT_ROOT'] . '/' . file_directory_path() . '/image_rotate/tmp';

  //@TODO user http://www.php.net/manual/de/function.tempnam.php do not save image, delete it after

  dsm(tempnam($image_rotate_file_dir, 'image_rotate_'));

  //get unique filename like image_rotate_eHr47t
  $temp_image = tempnam($image_rotate_file_dir, 'image_rotate_');
  //get filename only
  $temp_image_name = basename($temp_image);

  dsm($temp_image_name);

  //write the temporary image
  $image = imagePng($im, $image_rotate_file_dir . $temp_image_name . '.png');



  //imagePng($im, $drupal_file_dir . "$text.png");

  //read it for base64
  $handle = fopen($image_rotate_file_dir . "$text.png", "r");
  $binary = fread($handle, filesize($image_rotate_file_dir . "$text.png"));
  fclose($handle);

  //delete the images
  //unlink($temp_image);
  //unlink($temp_image . '.png');

  //ImageDestroy($im);
  return '<img src="data:image/png;base64,' . base64_encode($binary) . '" />';

}


/*
 *  Calculate the size of the bounding box that is needed to place the text in
 *
 * @return
 *   array with positions, sizes
 */

function calculateTextBox($text, $fontFile, $fontSize, $fontAngle)
{

  $boundingbox = imageTTFBbox($fontSize, $fontAngle, $fontFile, $text);
  $minX = min(array($boundingbox[0], $boundingbox[2], $boundingbox[4], $boundingbox[6]));
  $maxX = max(array($boundingbox[0], $boundingbox[2], $boundingbox[4], $boundingbox[6]));
  $minY = min(array($boundingbox[1], $boundingbox[3], $boundingbox[5], $boundingbox[7]));
  $maxY = max(array($boundingbox[1], $boundingbox[3], $boundingbox[5], $boundingbox[7]));

  return array(
    "left" => abs($minX) - 1,
    "top" => abs($minY) - 1,
    "width" => $maxX - $minX,
    "height" => $maxY - $minY
  );
}



